#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫–∞–Ω–µ—Ä FPV —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Raspberry Pi 4 + RX5808
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –¥—Ä–æ–Ω–æ–≤ –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ 5.8 –ì–ì—Ü
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
import cv2
import numpy as np
import RPi.GPIO as GPIO
import spidev
import subprocess
import os
from PIL import Image, ImageTk
import json

class SimpleFPVScanner:
    def __init__(self):
        # GPIO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è RX5808
        self.CS_PIN = 8          # CH2 (Chip Select)
        self.RSSI_PIN = 7       # RSSI input
        self.SPI_BUS = 0
        self.SPI_DEVICE = 0
        
        # –í–∏–¥–µ–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.video_device = self.find_video_device()
        self.video_width = 640
        self.video_height = 480
        self.video_fps = 30
        
        # FPV –∫–∞–Ω–∞–ª—ã 5.8 –ì–ì—Ü
        self.channels = {
            'A': 5865, 'B': 5845, 'C': 5825, 'D': 5805,
            'E': 5785, 'F': 5765, 'G': 5745, 'H': 5725
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
        self.scanning = False
        self.current_channel = 'A'
        self.detected_signals = {}
        self.video_capturing = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        if not self.setup_hardware():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ GUI
        self.create_gui()
        
    def find_video_device(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ USB Video DVR"""
        try:
            result = subprocess.run(['ls', '/dev/video*'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                devices = result.stdout.strip().split('\n')
                for device in devices:
                    if device.strip():
                        return device.strip()
            return "/dev/video0"
        except:
            return "/dev/video0"
    
    def setup_hardware(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO –∏ SPI –¥–ª—è RX5808"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SPI —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            import os
            if not os.path.exists('/dev/spi0.0'):
                print("‚ùå SPI –Ω–µ –≤–∫–ª—é—á–µ–Ω! –í–∫–ª—é—á–∏—Ç–µ SPI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Raspberry Pi:")
                print("1. sudo nano /boot/firmware/config.txt")
                print("2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: dtparam=spi=on")
                print("3. sudo reboot")
                messagebox.showerror("SPI –Ω–µ –≤–∫–ª—é—á–µ–Ω", 
                    "SPI –Ω–µ –≤–∫–ª—é—á–µ–Ω –Ω–∞ Raspberry Pi!\n\n"
                    "–í–∫–ª—é—á–∏—Ç–µ SPI:\n"
                    "1. sudo nano /boot/firmware/config.txt\n"
                    "2. –î–æ–±–∞–≤—å—Ç–µ: dtparam=spi=on\n"
                    "3. sudo reboot")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(self.CS_PIN, GPIO.OUT)
            GPIO.output(self.CS_PIN, GPIO.HIGH)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SPI
            self.spi = spidev.SpiDev()
            self.spi.open(self.SPI_BUS, self.SPI_DEVICE)
            self.spi.max_speed_hz = 2000000
            self.spi.mode = 0
            
            print("‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", 
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {e}\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "1. SPI –Ω–µ –≤–∫–ª—é—á–µ–Ω\n"
                "2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ RX5808\n"
                "3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return False
    
    def rx5808_write(self, address, data):
        """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–≥–∏—Å—Ç—Ä RX5808"""
        try:
            command = (address << 3) | data
            GPIO.output(self.CS_PIN, GPIO.LOW)
            self.spi.writebytes([command])
            GPIO.output(self.CS_PIN, GPIO.HIGH)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ RX5808: {e}")
    
    def set_frequency(self, frequency_mhz):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã RX5808 –≤ –ú–ì—Ü"""
        try:
            freq_reg = int((frequency_mhz - 479) / 2)
            self.rx5808_write(0x01, freq_reg & 0xFF)
            self.rx5808_write(0x02, (freq_reg >> 8) & 0xFF)
            self.rx5808_write(0x00, 0x01)
            print(f"–ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {frequency_mhz} –ú–ì—Ü")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã: {e}")
    
    def read_rssi(self):
        """–ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSSI —Å RX5808"""
        try:
            GPIO.output(self.CS_PIN, GPIO.LOW)
            self.spi.writebytes([0x08])
            response = self.spi.readbytes(1)
            GPIO.output(self.CS_PIN, GPIO.HIGH)
            return response[0] if response else 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è RSSI: {e}")
            return 0
    
    def scan_channels(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        while self.scanning:
            for channel, freq in self.channels.items():
                if not self.scanning:
                    break
                    
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
                self.set_frequency(freq)
                time.sleep(0.1)
                
                # –ß—Ç–µ–Ω–∏–µ RSSI
                rssi = self.read_rssi()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                if rssi > 50:
                    self.detected_signals[channel] = {
                        'frequency': freq,
                        'rssi': rssi,
                        'strength': min(100, int(rssi * 100 / 255)),
                        'timestamp': time.time()
                    }
                    
                    # –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ
                    if rssi > 100 and not self.video_capturing:
                        self.start_video_capture(channel, freq)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
                self.update_display()
                
            time.sleep(0.5)
    
    def start_video_capture(self, channel, frequency):
        """–ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            self.video_capturing = True
            self.current_channel = channel
            
            self.status_label.config(text=f"üé• –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ {channel} ({frequency} –ú–ì—Ü)")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ
            video_thread = threading.Thread(target=self.capture_video)
            video_thread.daemon = True
            video_thread.start()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ: {e}")
    
    def capture_video(self):
        """–ó–∞—Ö–≤–∞—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å USB Video DVR"""
        try:
            cap = cv2.VideoCapture(self.video_device)
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, self.video_width)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, self.video_height)
            cap.set(cv2.CAP_PROP_FPS, self.video_fps)
            
            if not cap.isOpened():
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
                return
            
            while self.video_capturing:
                ret, frame = cap.read()
                if ret:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
                    cv2.putText(frame, f"–ö–∞–Ω–∞–ª: {self.current_channel}", 
                               (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    cv2.putText(frame, f"–ß–∞—Å—Ç–æ—Ç–∞: {self.channels[self.current_channel]} –ú–ì—Ü", 
                               (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è Tkinter
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    frame_pil = Image.fromarray(frame_rgb)
                    frame_tk = ImageTk.PhotoImage(frame_pil)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
                    self.video_label.config(image=frame_tk)
                    self.video_label.image = frame_tk
                
                time.sleep(1.0 / self.video_fps)
            
            cap.release()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ: {e}")
        finally:
            self.video_capturing = False
    
    def create_gui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ GUI"""
        self.root = tk.Tk()
        self.root.title("üöÅ –ü—Ä–æ—Å—Ç–æ–π FPV –°–∫–∞–Ω–µ—Ä - Raspberry Pi 4 + RX5808")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2b2b2b')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_rowconfigure(1, weight=1)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞
        self.create_spectrum_display()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        self.create_video_display()
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.create_status_bar()
    
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.LabelFrame(self.root, text="üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–æ–º", padding="10")
        control_frame.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
        self.scan_button = ttk.Button(control_frame, text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                                     command=self.toggle_scanning)
        self.scan_button.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∏–¥–µ–æ
        self.video_button = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ", 
                                      command=self.stop_video_capture)
        self.video_button.pack(side="left", padx=5)
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        ttk.Label(control_frame, text="–ö–∞–Ω–∞–ª:").pack(side="left", padx=5)
        self.channel_var = tk.StringVar(value="A")
        channel_combo = ttk.Combobox(control_frame, textvariable=self.channel_var, 
                                    values=list(self.channels.keys()), width=5)
        channel_combo.pack(side="left", padx=5)
        channel_combo.bind("<<ComboboxSelected>>", self.on_channel_select)
        
        # –ü–æ—Ä–æ–≥ RSSI
        ttk.Label(control_frame, text="–ü–æ—Ä–æ–≥ RSSI:").pack(side="left", padx=5)
        self.threshold_var = tk.IntVar(value=50)
        threshold_scale = ttk.Scale(control_frame, from_=0, to=255, 
                                   variable=self.threshold_var, orient="horizontal")
        threshold_scale.pack(side="left", padx=5)
    
    def create_spectrum_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞"""
        spectrum_frame = ttk.LabelFrame(self.root, text="üìä –ß–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ø–µ–∫—Ç—Ä", padding="10")
        spectrum_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)
        
        # Canvas –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–µ–∫—Ç—Ä–∞
        self.spectrum_canvas = tk.Canvas(spectrum_frame, width=400, height=300, 
                                        bg="black", highlightthickness=0)
        self.spectrum_canvas.pack(fill="both", expand=True)
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞–ª—ã —á–∞—Å—Ç–æ—Ç
        self.draw_frequency_scale()
    
    def create_video_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ"""
        video_frame = ttk.LabelFrame(self.root, text="üì∫ –í–∏–¥–µ–æ –≤—ã—Ö–æ–¥", padding="10")
        video_frame.grid(row=1, column=1, sticky="nsew", padx=10, pady=5)
        
        # –ú–µ—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
        self.video_label = ttk.Label(video_frame, text="–ù–µ—Ç –≤–∏–¥–µ–æ—Å–∏–≥–Ω–∞–ª–∞", 
                                    background="black", foreground="white")
        self.video_label.pack(fill="both", expand=True)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        status_frame = ttk.Frame(self.root)
        status_frame.grid(row=2, column=0, columnspan=2, sticky="ew", padx=10, pady=5)
        
        self.status_label = ttk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.pack(side="left")
        
        # –°—á–µ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_count_label = ttk.Label(status_frame, text="–°–∏–≥–Ω–∞–ª–æ–≤: 0")
        self.signal_count_label.pack(side="right")
    
    def draw_frequency_scale(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∫–∞–ª—ã —á–∞—Å—Ç–æ—Ç –Ω–∞ canvas —Å–ø–µ–∫—Ç—Ä–∞"""
        canvas = self.spectrum_canvas
        canvas.delete("all")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        canvas.create_text(200, 20, text="5.8 –ì–ì—Ü FPV –ß–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ø–µ–∫—Ç—Ä", 
                          fill="white", font=("Arial", 12, "bold"))
        
        # –ú–∞—Ä–∫–µ—Ä—ã —á–∞—Å—Ç–æ—Ç
        x_start = 50
        x_end = 350
        y_base = 250
        
        for i, (channel, freq) in enumerate(self.channels.items()):
            x = x_start + (i * (x_end - x_start) / (len(self.channels) - 1))
            
            # –ú–µ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
            canvas.create_text(x, y_base + 20, text=f"{freq}", 
                              fill="white", font=("Arial", 8))
            canvas.create_text(x, y_base + 35, text=channel, 
                              fill="yellow", font=("Arial", 10, "bold"))
            
            # –ü–æ–ª–æ—Å–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            if channel in self.detected_signals:
                signal = self.detected_signals[channel]
                strength = signal['strength']
                bar_height = int((strength / 100) * 150)
                
                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã
                if strength > 80:
                    color = "red"
                elif strength > 60:
                    color = "orange"
                elif strength > 40:
                    color = "yellow"
                else:
                    color = "green"
                
                canvas.create_rectangle(x-10, y_base - bar_height, x+10, y_base, 
                                      fill=color, outline="white")
                
                # –ó–Ω–∞—á–µ–Ω–∏–µ RSSI
                canvas.create_text(x, y_base - bar_height - 10, 
                                  text=f"{signal['rssi']}", 
                                  fill="white", font=("Arial", 8))
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        self.draw_frequency_scale()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_count = len(self.detected_signals)
        self.signal_count_label.config(text=f"–°–∏–≥–Ω–∞–ª–æ–≤: {signal_count}")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if self.scanning:
            self.root.after(100, self.update_display)
    
    def toggle_scanning(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª/–≤—ã–∫–ª"""
        if not self.scanning:
            self.scanning = True
            self.scan_button.config(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self.status_label.config(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_thread = threading.Thread(target=self.scan_channels)
            scan_thread.daemon = True
            scan_thread.start()
        else:
            self.scanning = False
            self.scan_button.config(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self.status_label.config(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def stop_video_capture(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ"""
        self.video_capturing = False
        self.video_label.config(text="–ù–µ—Ç –≤–∏–¥–µ–æ—Å–∏–≥–Ω–∞–ª–∞")
        self.status_label.config(text="–ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def on_channel_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
        channel = self.channel_var.get()
        if channel in self.channels:
            freq = self.channels[channel]
            self.set_frequency(freq)
            self.status_label.config(text=f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª {channel} ({freq} –ú–ì—Ü)")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.scanning = False
        self.video_capturing = False
        
        try:
            GPIO.cleanup()
            if hasattr(self, 'spi'):
                self.spi.close()
        except:
            pass

if __name__ == "__main__":
    scanner = SimpleFPVScanner()
    scanner.run()
