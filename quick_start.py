#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ FPV —Å–∫–∞–Ω–µ—Ä–∞
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –¥—Ä–æ–Ω–æ–≤
"""

import sys
import os
import subprocess

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if sys.version_info < (3, 6):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.6 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    required_modules = ['RPi.GPIO', 'spidev', 'cv2', 'PIL', 'tkinter']
    missing_modules = []
    
    for module in required_modules:
        try:
            if module == 'RPi.GPIO':
                import RPi.GPIO
            elif module == 'spidev':
                import spidev
            elif module == 'cv2':
                import cv2
            elif module == 'PIL':
                from PIL import Image
            elif module == 'tkinter':
                import tkinter
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./install.sh")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SPI
    try:
        result = subprocess.run(['ls', '/dev/spi*'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå SPI –Ω–µ –≤–∫–ª—é—á–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ dtparam=spi=on –≤ /boot/config.txt")
            return False
    except:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SPI")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    try:
        result = subprocess.run(['ls', '/dev/video*'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ö†Ô∏è  USB Video DVR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        else:
            print("‚úÖ USB Video DVR –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    except:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
    return True

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    print("\nüöÅ FPV Scanner - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
    print("=" * 40)
    print("1. üß™ –¢–µ—Å—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    print("2. üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∫–∞–Ω–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("3. üìä –¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ GUI)")
    print("4. üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("5. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 40)

def run_hardware_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
    try:
        subprocess.run([sys.executable, 'examples/test_hardware.py'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

def run_simple_scanner():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞"""
    print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞...")
    try:
        subprocess.run([sys.executable, 'src/simple_scanner.py'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")

def run_advanced_scanner():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞"""
    print("‚öôÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–∞–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É–¥–∞–ª–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Å–∫–∞–Ω–µ—Ä (–æ–ø—Ü–∏—è 2)")

def run_headless_scanner():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –±–µ–∑ GUI"""
    print("üìä –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –±–µ–∑ GUI...")
    print("(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∫–∞–Ω–µ—Ä–∞

def show_settings():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_file = "config/scanner_config.json"
    if os.path.exists(config_file):
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file}")
    else:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPIO
    try:
        import RPi.GPIO as GPIO
        GPIO.setmode(GPIO.BCM)
        print("‚úÖ GPIO –¥–æ—Å—Ç—É–ø–µ–Ω")
        GPIO.cleanup()
    except:
        print("‚ùå GPIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SPI
    try:
        import spidev
        spi = spidev.SpiDev()
        print("‚úÖ SPI –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå SPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            print("‚úÖ –í–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ")
            cap.release()
        else:
            print("‚ùå –í–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    except:
        print("‚ùå OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÅ Raspberry Pi 4 RX5808 FPV Scanner")
    print("–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –¥—Ä–æ–Ω–æ–≤ –Ω–∞ 5.8 –ì–ì—Ü")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É:")
        print("   ./install.sh")
        return
    
    while True:
        show_menu()
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ").strip()
            
            if choice == '1':
                run_hardware_test()
            elif choice == '2':
                run_simple_scanner()
            elif choice == '3':
                run_headless_scanner()
            elif choice == '4':
                show_settings()
            elif choice == '5':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
